# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# Move focus of windows
alt - j: yabai -m window --focus prev
alt - k: yabai -m window --focus next

# Change size of windows
alt - h:  yabai -m window --resize left:-30:0
alt - l:  yabai -m window --resize right:30:0
alt - u:  yabai -m window --resize bottom:0:30
alt - i:  yabai -m window --resize top:0:-30

# Create and Destroy paces
alt - n: yabai -m space --create
alt - x: yabai -m space --destroy

# Move spaces
alt - 2: yabai -m space  --focus 2
alt - 3: yabai -m space  --focus 3
alt - 4: yabai -m space  --focus 4
alt - 5: yabai -m space  --focus 5
alt - 0x1B: yabai -m space  --focus first
alt - 0x18: yabai -m space  --focus last
alt - 0x2B: yabai -m space  --focus prev
alt - 0x2F: yabai -m space  --focus next
alt - 0: yabai -m window --space last
alt + shift - 0x2B: yabai -m window --space prev
alt + shift - 0x2F: yabai -m window --space next
# Balance space
alt - b: yabai -m space --balance
alt - r: yabai -m space --rotate 90
alt - s: yabai -m window --toggle split

# Warp space
alt - space: yabai -m window --warp last

# Open Terminal
alt + shift - return : open -a Terminal --new
alt - m: open -a Messenger --new
alt - e: open -a Mail --new
alt + shift - m: open -a Messages --new
alt - w: open -a Safari --new
alt - c: open -a Calendar --new
alt - q: open -a Notes --new
alt - v: open -a Brave\ Browser --new
alt - d: open -a Reminders --new
f6: open -a Streaks --new

